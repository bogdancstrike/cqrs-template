# Server Configuration
server.port=7676
spring.application.name=cqrs-template

# Spring Boot Actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Axon
axon.axonserver.enabled=false

# PostgreSQL (write model)
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Elasticsearch (read model)
spring.elasticsearch.uris=${SPRING_ELASTICSEARCH_URIS}

# Kafka
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.consumer.group-id=alert-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=template.cqrs.infrastructure.kafka.dto.IncomingAlertMessageDto

# Kafka Topics (injected)
app.kafka.topic.alerts.input=${APP_KAFKA_TOPIC_ALERTS_INPUT}
app.kafka.topic.alerts.events=${APP_KAFKA_TOPIC_ALERTS_EVENTS}

# Axon Kafka
axon.kafka.default-topic=${AXON_KAFKA_DEFAULT_TOPIC}
axon.kafka.producer.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}
axon.kafka.producer.transaction-id-prefix=axon-transaction-
axon.kafka.publisher.confirmation-mode=WAIT_FOR_ACK

# Projection batching
app.projection.batch.size=100
app.projection.batch.timeout-ms=120000

# Swagger
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=alpha
springdoc.swagger-ui.tagsSorter=alpha
springdoc.packagesToScan=template.cqrs.web.controller

# Logging
logging.level.template.cqrs=DEBUG
