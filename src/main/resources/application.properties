# Server Configuration
server.port=7676
spring.application.name=cqrs-template

# Spring Boot Actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Axon Framework Configuration
axon.axonserver.enabled=false
# Axon Event Store (JPA with PostgreSQL)

#axon.eventhandling.processors.tracking.token-store.type=jpa
# Axon's auto-configuration will use a JpaTokenStore by default for Tracking Event Processors
# when spring-boot-starter-data-jpa is present and Axon's TokenEntry entity is available.
# Individual processors (e.g., 'alert-projection-group') will use this default JpaTokenStore.

# axon.eventhandling.processors.<processorName>.mode=tracking # or subscribing
# axon.eventhandling.processors.<processorName>.source=kafkaMessageSource # Example if using Kafka as event bus directly for some processors

# PostgreSQL Configuration (Write Model - Event Store)
spring.datasource.url=jdbc:postgresql://localhost:5432/dev
spring.datasource.username=dev
spring.datasource.password=dev
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Elasticsearch Configuration (Read Model)
spring.elasticsearch.uris=http://192.168.1.164:9200
# spring.elasticsearch.username=elastic # If secured
# spring.elasticsearch.password=changeme # If secured
# spring.data.elasticsearch.client.reactive.endpoints=localhost:9200 # For reactive client if used

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=alert-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
 spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
 spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
 spring.kafka.properties.spring.json.trusted.packages=* # If using JsonSerializer
spring.kafka.consumer.properties.spring.json.value.default.type=template.cqrs.infrastructure.kafka.dto.IncomingAlertMessageDto


# Kafka Topics
app.kafka.topic.alerts.input=alerts-input-topic
app.kafka.topic.alerts.events=alerts-events-topic

# Axon Kafka Extension Configuration (if using Kafka as the Event Bus for Axon)
axon.kafka.default-topic=${app.kafka.topic.alerts.events}
axon.kafka.producer.transaction-id-prefix=axon-transaction-
axon.kafka.publisher.confirmation-mode=WAIT_FOR_ACK
# axon.kafka.consumer.<processorName>.group-id= # Consumer group for tracking processors

# Read Model Elasticsearch Projection Batching Configuration
app.projection.batch.size=100
app.projection.batch.timeout-ms=120000

# OpenAPI / Swagger Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=alpha
springdoc.swagger-ui.tagsSorter=alpha
springdoc.packagesToScan=template.cqrs

# Testcontainers specific properties (can be overridden in test profiles)
# These are not typically in the main application.properties but shown for completeness
# testcontainers.enabled=true
